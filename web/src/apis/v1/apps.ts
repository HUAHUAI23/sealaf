// @ts-ignore
/* eslint-disable */
///////////////////////////////////////////////////////////////////////
//                                                                   //
// this file is autogenerated by service-generate                    //
// do not edit this file manually                                    //
//                                                                   //
///////////////////////////////////////////////////////////////////////
/// <reference path = "api-auto.d.ts" />
import request from '@/utils/request';
import useGlobalStore from "@/pages/globalStore";

/**
* Create a new function
*/
export async function FunctionControllerCreate(
  params: Definitions.CreateFunctionDto,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions`, {
    method: 'POST',
    data : params,
  });
}

/**
* Query function list of an app
*/
export async function FunctionControllerFindAll(
  params: Paths.FunctionControllerFindAll.BodyParameters,
): Promise<{
    error: string;
    data: Paths.FunctionControllerFindAll.Responses
}> {
  // /v1/apps/{appid}/functions
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get a function by its name
*/
export async function FunctionControllerFindOne(
  params: Paths.FunctionControllerFindOne.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: 'GET',
    params : params,
  });
}

/**
* Update a function
*/
export async function FunctionControllerUpdate(
  params: Definitions.UpdateFunctionDto,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: 'PATCH',
    data : params,
  });
}

/**
* Delete a function
*/
export async function FunctionControllerRemove(
  params: Paths.FunctionControllerRemove.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}`, {
    method: 'DELETE',
    data : params,
  });
}

/**
* Update function debug info
*/
export async function FunctionControllerUpdateDebug(
  params: Definitions.UpdateFunctionDebugDto,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions/{name}/debug/params
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}/debug/params`, {
    method: 'PATCH',
    data : params,
  });
}

/**
* Compile a function 
*/
export async function FunctionControllerCompile(
  params: Definitions.CompileFunctionDto,
): Promise<{
    error: string;
    data: Definitions.CloudFunction
}> {
  // /v1/apps/{appid}/functions/{name}/compile
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}/compile`, {
    method: 'POST',
    data : params,
  });
}

/**
* Get cloud function history
*/
export async function FunctionControllerGetHistory(
  params: Paths.FunctionControllerGetHistory.BodyParameters,
): Promise<{
    error: string;
    data: Paths.FunctionControllerGetHistory.Responses
}> {
  // /v1/apps/{appid}/functions/{name}/history
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/functions/${_params.name}/history`, {
    method: 'GET',
    params : params,
  });
}

/**
* Update environment variables (replace all)
*/
export async function EnvironmentVariableControllerUpdateAll(
  params: Paths.EnvironmentVariableControllerUpdateAll.BodyParameters,
): Promise<{
    error: string;
    data: Paths.EnvironmentVariableControllerUpdateAll.Responses
}> {
  // /v1/apps/{appid}/environments
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/environments`, {
    method: 'POST',
    data : params,
  });
}

/**
* Set a environment variable (create/update)
*/
export async function EnvironmentVariableControllerAdd(
  params: Definitions.CreateEnvironmentDto,
): Promise<{
    error: string;
    data: Paths.EnvironmentVariableControllerAdd.Responses
}> {
  // /v1/apps/{appid}/environments
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/environments`, {
    method: 'PATCH',
    data : params,
  });
}

/**
* Get environment variables
*/
export async function EnvironmentVariableControllerGet(
  params: Paths.EnvironmentVariableControllerGet.BodyParameters,
): Promise<{
    error: string;
    data: Paths.EnvironmentVariableControllerGet.Responses
}> {
  // /v1/apps/{appid}/environments
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/environments`, {
    method: 'GET',
    params : params,
  });
}

/**
* Delete an environment variable by name
*/
export async function EnvironmentVariableControllerDelete(
  params: Paths.EnvironmentVariableControllerDelete.BodyParameters,
): Promise<{
    error: string;
    data: Paths.EnvironmentVariableControllerDelete.Responses
}> {
  // /v1/apps/{appid}/environments/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/environments/${_params.name}`, {
    method: 'DELETE',
    data : params,
  });
}

/**
* Get app all pod name
*/
export async function PodControllerGetPodNameList(
  params: Paths.PodControllerGetPodNameList.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.PodNameListDto
}> {
  // /v1/apps/{appid}/pod
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/pod`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get pod's containers
*/
export async function PodControllerGetContainerNameList(
  params: Paths.PodControllerGetContainerNameList.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.ContainerNameListDto
}> {
  // /v1/apps/{appid}/pod/container
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/pod/container`, {
    method: 'GET',
    params : params,
  });
}

/**
* Create a new collection in database
*/
export async function CollectionControllerCreate(
  params: Definitions.CreateCollectionDto,
): Promise<{
    error: string;
    data: Paths.CollectionControllerCreate.Responses
}> {
  // /v1/apps/{appid}/collections
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections`, {
    method: 'POST',
    data : params,
  });
}

/**
* Get collection list of an application
*/
export async function CollectionControllerFindAll(
  params: Paths.CollectionControllerFindAll.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.Collection
}> {
  // /v1/apps/{appid}/collections
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get collection by name
*/
export async function CollectionControllerFindOne(
  params: Paths.CollectionControllerFindOne.BodyParameters,
): Promise<{
    error: string;
    data: Definitions.Collection
}> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: 'GET',
    params : params,
  });
}

/**
* Update a collection
*/
export async function CollectionControllerUpdate(
  params: Definitions.UpdateCollectionDto,
): Promise<{
    error: string;
    data: Paths.CollectionControllerUpdate.Responses
}> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: 'PATCH',
    data : params,
  });
}

/**
* Delete a collection by its name
*/
export async function CollectionControllerRemove(
  params: Paths.CollectionControllerRemove.BodyParameters,
): Promise<{
    error: string;
    data: Paths.CollectionControllerRemove.Responses
}> {
  // /v1/apps/{appid}/collections/{name}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/collections/${_params.name}`, {
    method: 'DELETE',
    data : params,
  });
}

/**
* The database proxy for database management
*/
export async function DatabaseControllerProxy(
  params: Paths.DatabaseControllerProxy.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DatabaseControllerProxy.Responses
}> {
  // /v1/apps/{appid}/databases/proxy
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/databases/proxy`, {
    method: 'POST',
    data : params,
  });
}

/**
* Get dedicated database resources metrics data
*/
export async function DedicatedDatabaseMonitorControllerGetResource(
  params: Paths.DedicatedDatabaseMonitorControllerGetResource.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DedicatedDatabaseMonitorControllerGetResource.Responses
}> {
  // /v1/apps/{appid}/dedicated-database/monitor/resource
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dedicated-database/monitor/resource`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get dedicated database connections metrics data
*/
export async function DedicatedDatabaseMonitorControllerGetConnection(
  params: Paths.DedicatedDatabaseMonitorControllerGetConnection.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DedicatedDatabaseMonitorControllerGetConnection.Responses
}> {
  // /v1/apps/{appid}/dedicated-database/monitor/connection
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dedicated-database/monitor/connection`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get dedicated database performance metrics data
*/
export async function DedicatedDatabaseMonitorControllerGetPerformance(
  params: Paths.DedicatedDatabaseMonitorControllerGetPerformance.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DedicatedDatabaseMonitorControllerGetPerformance.Responses
}> {
  // /v1/apps/{appid}/dedicated-database/monitor/performance
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dedicated-database/monitor/performance`, {
    method: 'GET',
    params : params,
  });
}

/**
* Get app pod logs
*/
export async function LogControllerStreamLogs(
  params: Paths.LogControllerStreamLogs.BodyParameters,
): Promise<{
    error: string;
    data: Paths.LogControllerStreamLogs.Responses
}> {
  // /v1/apps/{appid}/logs/{podName}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/logs/${_params.podName}`, {
    method: 'GET',
    params : params,
  });
}

/**
* Add application dependencies
*/
export async function DependencyControllerAdd(
  params: Paths.DependencyControllerAdd.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DependencyControllerAdd.Responses
}> {
  // /v1/apps/{appid}/dependencies
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dependencies`, {
    method: 'POST',
    data : params,
  });
}

/**
* Update application dependencies
*/
export async function DependencyControllerUpdate(
  params: Paths.DependencyControllerUpdate.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DependencyControllerUpdate.Responses
}> {
  // /v1/apps/{appid}/dependencies
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dependencies`, {
    method: 'PATCH',
    data : params,
  });
}

/**
* Get application dependencies
*/
export async function DependencyControllerGetDependencies(
  params: Paths.DependencyControllerGetDependencies.BodyParameters,
): Promise<{
    error: string;
    data: Paths.DependencyControllerGetDependencies.Responses
}> {
  // /v1/apps/{appid}/dependencies
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dependencies`, {
    method: 'GET',
    params : params,
  });
}

/**
* Remove a dependency
*/
export async function DependencyControllerRemove(
  params: Definitions.DeleteDependencyDto,
): Promise<{
    error: string;
    data: Paths.DependencyControllerRemove.Responses
}> {
  // /v1/apps/{appid}/dependencies
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/dependencies`, {
    method: 'DELETE',
    data : params,
  });
}

/**
* Create a cron trigger
*/
export async function TriggerControllerCreate(
  params: Definitions.CreateTriggerDto,
): Promise<{
    error: string;
    data: Paths.TriggerControllerCreate.Responses
}> {
  // /v1/apps/{appid}/triggers
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/triggers`, {
    method: 'POST',
    data : params,
  });
}

/**
* Get trigger list of an application
*/
export async function TriggerControllerFindAll(
  params: Paths.TriggerControllerFindAll.BodyParameters,
): Promise<{
    error: string;
    data: Paths.TriggerControllerFindAll.Responses
}> {
  // /v1/apps/{appid}/triggers
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/triggers`, {
    method: 'GET',
    params : params,
  });
}

/**
* Remove a cron trigger
*/
export async function TriggerControllerRemove(
  params: Paths.TriggerControllerRemove.BodyParameters,
): Promise<{
    error: string;
    data: Paths.TriggerControllerRemove.Responses
}> {
  // /v1/apps/{appid}/triggers/{id}
  let _params: { [key: string]: any } = {
    appid: useGlobalStore.getState().currentApp?.appid || '',
    ...params,
  };
  return request(`/v1/apps/${_params.appid}/triggers/${_params.id}`, {
    method: 'DELETE',
    data : params,
  });
}

